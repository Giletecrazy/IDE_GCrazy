//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from myC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class myCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, FLOAT=42, INT=43, DIGIT=44, LETTER=45, Whitespace=46, 
		LineComment=47, BlockComment=48;
	public const int
		RULE_tipo = 0, RULE_programa = 1, RULE_atribuicao = 2, RULE_bloco = 3, 
		RULE_stmt = 4, RULE_incremento = 5, RULE_decls = 6, RULE_funcao = 7, RULE_declaracao = 8, 
		RULE_argumentos = 9, RULE_string = 10, RULE_identificador = 11, RULE_expr = 12, 
		RULE_negacao = 13, RULE_expressao = 14, RULE_operador = 15, RULE_termo = 16, 
		RULE_expr_aritmetica = 17, RULE_expr_relacional = 18, RULE_operador_logico = 19, 
		RULE_condicao = 20, RULE_expr_logica = 21, RULE_condicional = 22, RULE_loop = 23, 
		RULE_retorno = 24, RULE_chamada_funcao = 25, RULE_entrada = 26, RULE_saida = 27, 
		RULE_selecao = 28, RULE_casos = 29, RULE_operador_relacional = 30, RULE_comparacao = 31, 
		RULE_array_decl = 32, RULE_acesso_array = 33, RULE_for = 34, RULE_if_else = 35;
	public static readonly string[] ruleNames = {
		"tipo", "programa", "atribuicao", "bloco", "stmt", "incremento", "decls", 
		"funcao", "declaracao", "argumentos", "string", "identificador", "expr", 
		"negacao", "expressao", "operador", "termo", "expr_aritmetica", "expr_relacional", 
		"operador_logico", "condicao", "expr_logica", "condicional", "loop", "retorno", 
		"chamada_funcao", "entrada", "saida", "selecao", "casos", "operador_relacional", 
		"comparacao", "array_decl", "acesso_array", "for", "if_else"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'void'", "'string'", "'main'", "'('", "')'", 
		"'='", "';'", "'{'", "'}'", "'++'", "','", "'\"'", "'!'", "'+'", "'-'", 
		"'*'", "'/'", "'&&'", "'||'", "'if'", "'while'", "'return'", "'scanf'", 
		"'printf'", "'switch'", "'case'", "':'", "'break;'", "'default'", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'['", "']'", "'for'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "FLOAT", "INT", "DIGIT", "LETTER", 
		"Whitespace", "LineComment", "BlockComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "myC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static myCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public myCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public myCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 0, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 2, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			decls();
			State = 75;
			Match(T__4);
			State = 76;
			Match(T__5);
			State = 77;
			Match(T__6);
			State = 78;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(myCParser.FLOAT, 0); }
		public AtribuicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribuicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitAtribuicao(this);
		}
	}

	[RuleVersion(0)]
	public AtribuicaoContext atribuicao() {
		AtribuicaoContext _localctx = new AtribuicaoContext(Context, State);
		EnterRule(_localctx, 4, RULE_atribuicao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			identificador();
			State = 81;
			Match(T__7);
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 82;
				@string();
				}
				break;
			case INT:
				{
				State = 83;
				Match(INT);
				}
				break;
			case FLOAT:
				{
				State = 84;
				Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 87;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 6, RULE_bloco);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__9);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 90;
				stmt();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48378775913566L) != 0) );
			State = 95;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoContext incremento() {
			return GetRuleContext<IncrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SaidaContext saida() {
			return GetRuleContext<SaidaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondicionalContext condicional() {
			return GetRuleContext<CondicionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetornoContext retorno() {
			return GetRuleContext<RetornoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Chamada_funcaoContext chamada_funcao() {
			return GetRuleContext<Chamada_funcaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelecaoContext selecao() {
			return GetRuleContext<SelecaoContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				incremento();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				saida();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				atribuicao();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				expressao();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				decls();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 102;
				bloco();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				condicional();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				loop();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 105;
				retorno();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 106;
				chamada_funcao();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 107;
				entrada();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 108;
				selecao();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		public IncrementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incremento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitIncremento(this);
		}
	}

	[RuleVersion(0)]
	public IncrementoContext incremento() {
		IncrementoContext _localctx = new IncrementoContext(Context, State);
		EnterRule(_localctx, 10, RULE_incremento);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			identificador();
			State = 112;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext[] declaracao() {
			return GetRuleContexts<DeclaracaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext declaracao(int i) {
			return GetRuleContext<DeclaracaoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext[] funcao() {
			return GetRuleContexts<FuncaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext funcao(int i) {
			return GetRuleContext<FuncaoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_declContext[] array_decl() {
			return GetRuleContexts<Array_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_declContext array_decl(int i) {
			return GetRuleContext<Array_declContext>(i);
		}
		public DeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitDecls(this);
		}
	}

	[RuleVersion(0)]
	public DeclsContext decls() {
		DeclsContext _localctx = new DeclsContext(Context, State);
		EnterRule(_localctx, 12, RULE_decls);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 117;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 114;
						declaracao();
						}
						break;
					case 2:
						{
						State = 115;
						funcao();
						}
						break;
					case 3:
						{
						State = 116;
						array_decl();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public FuncaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitFuncao(this);
		}
	}

	[RuleVersion(0)]
	public FuncaoContext funcao() {
		FuncaoContext _localctx = new FuncaoContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			tipo();
			State = 122;
			identificador();
			State = 123;
			Match(T__5);
			State = 124;
			Match(T__6);
			State = 125;
			Match(T__9);
			State = 126;
			bloco();
			State = 127;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(myCParser.FLOAT, 0); }
		public DeclaracaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitDeclaracao(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracaoContext declaracao() {
		DeclaracaoContext _localctx = new DeclaracaoContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaracao);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			tipo();
			State = 130;
			identificador();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 131;
				Match(T__7);
				State = 135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
					{
					State = 132;
					@string();
					}
					break;
				case INT:
					{
					State = 133;
					Match(INT);
					}
					break;
				case FLOAT:
					{
					State = 134;
					Match(FLOAT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 139;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext[] expressao() {
			return GetRuleContexts<ExpressaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao(int i) {
			return GetRuleContext<ExpressaoContext>(i);
		}
		public ArgumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitArgumentos(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentosContext argumentos() {
		ArgumentosContext _localctx = new ArgumentosContext(Context, State);
		EnterRule(_localctx, 18, RULE_argumentos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 141;
			expressao();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 142;
				Match(T__12);
				State = 143;
				expressao();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(myCParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(myCParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(myCParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(myCParser.DIGIT, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 20, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__13);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				_la = TokenStream.LA(1);
				if ( !(_la==DIGIT || _la==LETTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT || _la==LETTER );
			State = 155;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentificadorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(myCParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(myCParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(myCParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(myCParser.DIGIT, i);
		}
		public IdentificadorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identificador; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterIdentificador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitIdentificador(this);
		}
	}

	[RuleVersion(0)]
	public IdentificadorContext identificador() {
		IdentificadorContext _localctx = new IdentificadorContext(Context, State);
		EnterRule(_localctx, 22, RULE_identificador);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(LETTER);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 158;
					_la = TokenStream.LA(1);
					if ( !(_la==DIGIT || _la==LETTER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo() {
			return GetRuleContext<TermoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperadorContext[] operador() {
			return GetRuleContexts<OperadorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperadorContext operador(int i) {
			return GetRuleContext<OperadorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			termo();
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 165;
					operador();
					State = 166;
					expr();
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegacaoContext : ParserRuleContext {
		public NegacaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negacao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterNegacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitNegacao(this);
		}
	}

	[RuleVersion(0)]
	public NegacaoContext negacao() {
		NegacaoContext _localctx = new NegacaoContext(Context, State);
		EnterRule(_localctx, 26, RULE_negacao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aritmeticaContext expr_aritmetica() {
			return GetRuleContext<Expr_aritmeticaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logicaContext expr_logica() {
			return GetRuleContext<Expr_logicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		public ExpressaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterExpressao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitExpressao(this);
		}
	}

	[RuleVersion(0)]
	public ExpressaoContext expressao() {
		ExpressaoContext _localctx = new ExpressaoContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressao);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				expr_aritmetica();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				expr_logica(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				expr_relacional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperadorContext : ParserRuleContext {
		public OperadorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operador; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterOperador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitOperador(this);
		}
	}

	[RuleVersion(0)]
	public OperadorContext operador() {
		OperadorContext _localctx = new OperadorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operador);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 983296L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(myCParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public TermoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitTermo(this);
		}
	}

	[RuleVersion(0)]
	public TermoContext termo() {
		TermoContext _localctx = new TermoContext(Context, State);
		EnterRule(_localctx, 32, RULE_termo);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				identificador();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				Match(FLOAT);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				@string();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186;
				Match(T__5);
				State = 187;
				expressao();
				State = 188;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_aritmeticaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperadorContext[] operador() {
			return GetRuleContexts<OperadorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperadorContext operador(int i) {
			return GetRuleContext<OperadorContext>(i);
		}
		public Expr_aritmeticaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_aritmetica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterExpr_aritmetica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitExpr_aritmetica(this);
		}
	}

	[RuleVersion(0)]
	public Expr_aritmeticaContext expr_aritmetica() {
		Expr_aritmeticaContext _localctx = new Expr_aritmeticaContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_aritmetica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			expr();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 193;
				operador();
				State = 194;
				expr();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 983296L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_relacionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operador_relacionalContext operador_relacional() {
			return GetRuleContext<Operador_relacionalContext>(0);
		}
		public Expr_relacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_relacional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterExpr_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitExpr_relacional(this);
		}
	}

	[RuleVersion(0)]
	public Expr_relacionalContext expr_relacional() {
		Expr_relacionalContext _localctx = new Expr_relacionalContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_relacional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			expr();
			State = 201;
			operador_relacional();
			State = 202;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operador_logicoContext : ParserRuleContext {
		public Operador_logicoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operador_logico; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterOperador_logico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitOperador_logico(this);
		}
	}

	[RuleVersion(0)]
	public Operador_logicoContext operador_logico() {
		Operador_logicoContext _localctx = new Operador_logicoContext(Context, State);
		EnterRule(_localctx, 38, RULE_operador_logico);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__20) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext[] expressao() {
			return GetRuleContexts<ExpressaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao(int i) {
			return GetRuleContext<ExpressaoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operador_relacionalContext operador_relacional() {
			return GetRuleContext<Operador_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegacaoContext negacao() {
			return GetRuleContext<NegacaoContext>(0);
		}
		public CondicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterCondicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitCondicao(this);
		}
	}

	[RuleVersion(0)]
	public CondicaoContext condicao() {
		CondicaoContext _localctx = new CondicaoContext(Context, State);
		EnterRule(_localctx, 40, RULE_condicao);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				expressao();
				State = 207;
				operador_relacional();
				State = 208;
				expressao();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				negacao();
				State = 211;
				expressao();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_logicaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegacaoContext negacao() {
			return GetRuleContext<NegacaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logicaContext[] expr_logica() {
			return GetRuleContexts<Expr_logicaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logicaContext expr_logica(int i) {
			return GetRuleContext<Expr_logicaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operador_logicoContext operador_logico() {
			return GetRuleContext<Operador_logicoContext>(0);
		}
		public Expr_logicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_logica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterExpr_logica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitExpr_logica(this);
		}
	}

	[RuleVersion(0)]
	public Expr_logicaContext expr_logica() {
		return expr_logica(0);
	}

	private Expr_logicaContext expr_logica(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr_logicaContext _localctx = new Expr_logicaContext(Context, _parentState);
		Expr_logicaContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr_logica, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				{
				State = 216;
				negacao();
				State = 217;
				expr_logica(2);
				}
				break;
			case T__5:
			case T__13:
			case FLOAT:
			case INT:
			case LETTER:
				{
				State = 219;
				expr_relacional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_logicaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr_logica);
					State = 222;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 223;
					operador_logico();
					State = 224;
					expr_logica(4);
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CondicionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondicaoContext condicao() {
			return GetRuleContext<CondicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public CondicionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterCondicional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitCondicional(this);
		}
	}

	[RuleVersion(0)]
	public CondicionalContext condicional() {
		CondicionalContext _localctx = new CondicionalContext(Context, State);
		EnterRule(_localctx, 44, RULE_condicional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(T__21);
			State = 232;
			Match(T__5);
			State = 233;
			condicao();
			State = 234;
			Match(T__6);
			State = 235;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondicaoContext condicao() {
			return GetRuleContext<CondicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 46, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__22);
			State = 238;
			Match(T__5);
			State = 239;
			condicao();
			State = 240;
			Match(T__6);
			State = 241;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetornoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(myCParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public RetornoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retorno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterRetorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitRetorno(this);
		}
	}

	[RuleVersion(0)]
	public RetornoContext retorno() {
		RetornoContext _localctx = new RetornoContext(Context, State);
		EnterRule(_localctx, 48, RULE_retorno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(T__23);
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 244;
				Match(INT);
				}
				break;
			case FLOAT:
				{
				State = 245;
				Match(FLOAT);
				}
				break;
			case T__13:
				{
				State = 246;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 249;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Chamada_funcaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentosContext argumentos() {
			return GetRuleContext<ArgumentosContext>(0);
		}
		public Chamada_funcaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chamada_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterChamada_funcao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitChamada_funcao(this);
		}
	}

	[RuleVersion(0)]
	public Chamada_funcaoContext chamada_funcao() {
		Chamada_funcaoContext _localctx = new Chamada_funcaoContext(Context, State);
		EnterRule(_localctx, 50, RULE_chamada_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			identificador();
			State = 252;
			Match(T__5);
			State = 253;
			argumentos();
			State = 254;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(Context, State);
		EnterRule(_localctx, 52, RULE_entrada);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(T__24);
			State = 257;
			Match(T__5);
			State = 258;
			identificador();
			State = 259;
			Match(T__6);
			State = 260;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaidaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		public SaidaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saida; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterSaida(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitSaida(this);
		}
	}

	[RuleVersion(0)]
	public SaidaContext saida() {
		SaidaContext _localctx = new SaidaContext(Context, State);
		EnterRule(_localctx, 54, RULE_saida);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(T__25);
			State = 263;
			Match(T__5);
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 264;
				@string();
				}
				break;
			case LETTER:
				{
				State = 265;
				identificador();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 268;
			Match(T__6);
			State = 269;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelecaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Acesso_arrayContext acesso_array() {
			return GetRuleContext<Acesso_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CasosContext casos() {
			return GetRuleContext<CasosContext>(0);
		}
		public SelecaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selecao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterSelecao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitSelecao(this);
		}
	}

	[RuleVersion(0)]
	public SelecaoContext selecao() {
		SelecaoContext _localctx = new SelecaoContext(Context, State);
		EnterRule(_localctx, 56, RULE_selecao);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				Match(T__26);
				State = 272;
				Match(T__5);
				State = 273;
				identificador();
				}
				break;
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				acesso_array();
				State = 275;
				Match(T__6);
				State = 276;
				Match(T__9);
				State = 277;
				casos();
				State = 278;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(myCParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(myCParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(myCParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(myCParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public CasosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterCasos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitCasos(this);
		}
	}

	[RuleVersion(0)]
	public CasosContext casos() {
		CasosContext _localctx = new CasosContext(Context, State);
		EnterRule(_localctx, 58, RULE_casos);
		int _la;
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 282;
					Match(T__27);
					State = 286;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT:
						{
						State = 283;
						Match(INT);
						}
						break;
					case FLOAT:
						{
						State = 284;
						Match(FLOAT);
						}
						break;
					case T__13:
						{
						State = 285;
						@string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 288;
					Match(T__28);
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 289;
						stmt();
						}
						}
						State = 292;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48378775913566L) != 0) );
					State = 294;
					Match(T__29);
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__27 );
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				Match(T__30);
				State = 301;
				Match(T__28);
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 302;
					stmt();
					}
					}
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48378775913566L) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operador_relacionalContext : ParserRuleContext {
		public Operador_relacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operador_relacional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterOperador_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitOperador_relacional(this);
		}
	}

	[RuleVersion(0)]
	public Operador_relacionalContext operador_relacional() {
		Operador_relacionalContext _localctx = new Operador_relacionalContext(Context, State);
		EnterRule(_localctx, 60, RULE_operador_relacional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270582939648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparacaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext[] expressao() {
			return GetRuleContexts<ExpressaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao(int i) {
			return GetRuleContext<ExpressaoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operador_relacionalContext operador_relacional() {
			return GetRuleContext<Operador_relacionalContext>(0);
		}
		public ComparacaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparacao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterComparacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitComparacao(this);
		}
	}

	[RuleVersion(0)]
	public ComparacaoContext comparacao() {
		ComparacaoContext _localctx = new ComparacaoContext(Context, State);
		EnterRule(_localctx, 62, RULE_comparacao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			expressao();
			State = 312;
			operador_relacional();
			State = 313;
			expressao();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		public Array_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterArray_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitArray_decl(this);
		}
	}

	[RuleVersion(0)]
	public Array_declContext array_decl() {
		Array_declContext _localctx = new Array_declContext(Context, State);
		EnterRule(_localctx, 64, RULE_array_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			tipo();
			State = 316;
			identificador();
			State = 317;
			Match(T__37);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 318;
				Match(INT);
				}
			}

			State = 321;
			Match(T__38);
			State = 322;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Acesso_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificadorContext identificador() {
			return GetRuleContext<IdentificadorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(myCParser.INT, 0); }
		public Acesso_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acesso_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterAcesso_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitAcesso_array(this);
		}
	}

	[RuleVersion(0)]
	public Acesso_arrayContext acesso_array() {
		Acesso_arrayContext _localctx = new Acesso_arrayContext(Context, State);
		EnterRule(_localctx, 66, RULE_acesso_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			identificador();
			State = 325;
			Match(T__37);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 326;
				Match(INT);
				}
			}

			State = 329;
			Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondicaoContext condicao() {
			return GetRuleContext<CondicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoContext incremento() {
			return GetRuleContext<IncrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 68, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(T__39);
			State = 332;
			Match(T__5);
			State = 333;
			atribuicao();
			State = 334;
			Match(T__8);
			State = 335;
			condicao();
			State = 336;
			Match(T__8);
			State = 337;
			incremento();
			State = 338;
			Match(T__6);
			State = 339;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondicaoContext condicao() {
			return GetRuleContext<CondicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext[] bloco() {
			return GetRuleContexts<BlocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco(int i) {
			return GetRuleContext<BlocoContext>(i);
		}
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.EnterIf_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyCListener typedListener = listener as ImyCListener;
			if (typedListener != null) typedListener.ExitIf_else(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 70, RULE_if_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(T__21);
			State = 342;
			Match(T__5);
			State = 343;
			condicao();
			State = 344;
			Match(T__6);
			State = 345;
			bloco();
			State = 346;
			Match(T__40);
			State = 347;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_logica_sempred((Expr_logicaContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_logica_sempred(Expr_logicaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,350,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,2,86,8,2,1,2,1,2,
		1,3,1,3,4,3,92,8,3,11,3,12,3,93,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,110,8,4,1,5,1,5,1,5,1,6,1,6,1,6,4,6,118,8,6,11,6,
		12,6,119,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,136,
		8,8,3,8,138,8,8,1,8,1,8,1,9,1,9,1,9,5,9,145,8,9,10,9,12,9,148,9,9,1,10,
		1,10,4,10,152,8,10,11,10,12,10,153,1,10,1,10,1,11,1,11,5,11,160,8,11,10,
		11,12,11,163,9,11,1,12,1,12,1,12,1,12,5,12,169,8,12,10,12,12,12,172,9,
		12,1,13,1,13,1,14,1,14,1,14,3,14,179,8,14,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,3,16,191,8,16,1,17,1,17,1,17,1,17,4,17,197,8,17,11,
		17,12,17,198,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,3,20,214,8,20,1,21,1,21,1,21,1,21,1,21,3,21,221,8,21,1,21,1,21,
		1,21,1,21,5,21,227,8,21,10,21,12,21,230,9,21,1,22,1,22,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,248,8,24,1,
		24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
		27,1,27,1,27,3,27,267,8,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,3,28,281,8,28,1,29,1,29,1,29,1,29,3,29,287,8,29,1,29,1,
		29,4,29,291,8,29,11,29,12,29,292,1,29,1,29,4,29,297,8,29,11,29,12,29,298,
		1,29,1,29,1,29,4,29,304,8,29,11,29,12,29,305,3,29,308,8,29,1,30,1,30,1,
		31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,320,8,32,1,32,1,32,1,32,1,33,
		1,33,1,33,3,33,328,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,0,1,42,36,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,0,5,1,0,1,4,1,0,44,45,2,0,8,8,16,19,1,0,
		20,21,1,0,32,37,359,0,72,1,0,0,0,2,74,1,0,0,0,4,80,1,0,0,0,6,89,1,0,0,
		0,8,109,1,0,0,0,10,111,1,0,0,0,12,117,1,0,0,0,14,121,1,0,0,0,16,129,1,
		0,0,0,18,141,1,0,0,0,20,149,1,0,0,0,22,157,1,0,0,0,24,164,1,0,0,0,26,173,
		1,0,0,0,28,178,1,0,0,0,30,180,1,0,0,0,32,190,1,0,0,0,34,192,1,0,0,0,36,
		200,1,0,0,0,38,204,1,0,0,0,40,213,1,0,0,0,42,220,1,0,0,0,44,231,1,0,0,
		0,46,237,1,0,0,0,48,243,1,0,0,0,50,251,1,0,0,0,52,256,1,0,0,0,54,262,1,
		0,0,0,56,280,1,0,0,0,58,307,1,0,0,0,60,309,1,0,0,0,62,311,1,0,0,0,64,315,
		1,0,0,0,66,324,1,0,0,0,68,331,1,0,0,0,70,341,1,0,0,0,72,73,7,0,0,0,73,
		1,1,0,0,0,74,75,3,12,6,0,75,76,5,5,0,0,76,77,5,6,0,0,77,78,5,7,0,0,78,
		79,3,6,3,0,79,3,1,0,0,0,80,81,3,22,11,0,81,85,5,8,0,0,82,86,3,20,10,0,
		83,86,5,43,0,0,84,86,5,42,0,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,
		0,86,87,1,0,0,0,87,88,5,9,0,0,88,5,1,0,0,0,89,91,5,10,0,0,90,92,3,8,4,
		0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,
		0,95,96,5,11,0,0,96,7,1,0,0,0,97,110,3,10,5,0,98,110,3,54,27,0,99,110,
		3,4,2,0,100,110,3,28,14,0,101,110,3,12,6,0,102,110,3,6,3,0,103,110,3,44,
		22,0,104,110,3,46,23,0,105,110,3,48,24,0,106,110,3,50,25,0,107,110,3,52,
		26,0,108,110,3,56,28,0,109,97,1,0,0,0,109,98,1,0,0,0,109,99,1,0,0,0,109,
		100,1,0,0,0,109,101,1,0,0,0,109,102,1,0,0,0,109,103,1,0,0,0,109,104,1,
		0,0,0,109,105,1,0,0,0,109,106,1,0,0,0,109,107,1,0,0,0,109,108,1,0,0,0,
		110,9,1,0,0,0,111,112,3,22,11,0,112,113,5,12,0,0,113,11,1,0,0,0,114,118,
		3,16,8,0,115,118,3,14,7,0,116,118,3,64,32,0,117,114,1,0,0,0,117,115,1,
		0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,
		120,13,1,0,0,0,121,122,3,0,0,0,122,123,3,22,11,0,123,124,5,6,0,0,124,125,
		5,7,0,0,125,126,5,10,0,0,126,127,3,6,3,0,127,128,5,11,0,0,128,15,1,0,0,
		0,129,130,3,0,0,0,130,137,3,22,11,0,131,135,5,8,0,0,132,136,3,20,10,0,
		133,136,5,43,0,0,134,136,5,42,0,0,135,132,1,0,0,0,135,133,1,0,0,0,135,
		134,1,0,0,0,136,138,1,0,0,0,137,131,1,0,0,0,137,138,1,0,0,0,138,139,1,
		0,0,0,139,140,5,9,0,0,140,17,1,0,0,0,141,146,3,28,14,0,142,143,5,13,0,
		0,143,145,3,28,14,0,144,142,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,
		147,1,0,0,0,147,19,1,0,0,0,148,146,1,0,0,0,149,151,5,14,0,0,150,152,7,
		1,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,
		154,155,1,0,0,0,155,156,5,14,0,0,156,21,1,0,0,0,157,161,5,45,0,0,158,160,
		7,1,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,
		0,162,23,1,0,0,0,163,161,1,0,0,0,164,170,3,32,16,0,165,166,3,30,15,0,166,
		167,3,24,12,0,167,169,1,0,0,0,168,165,1,0,0,0,169,172,1,0,0,0,170,168,
		1,0,0,0,170,171,1,0,0,0,171,25,1,0,0,0,172,170,1,0,0,0,173,174,5,15,0,
		0,174,27,1,0,0,0,175,179,3,34,17,0,176,179,3,42,21,0,177,179,3,36,18,0,
		178,175,1,0,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,29,1,0,0,0,180,181,
		7,2,0,0,181,31,1,0,0,0,182,191,3,22,11,0,183,191,5,43,0,0,184,191,5,42,
		0,0,185,191,3,20,10,0,186,187,5,6,0,0,187,188,3,28,14,0,188,189,5,7,0,
		0,189,191,1,0,0,0,190,182,1,0,0,0,190,183,1,0,0,0,190,184,1,0,0,0,190,
		185,1,0,0,0,190,186,1,0,0,0,191,33,1,0,0,0,192,196,3,24,12,0,193,194,3,
		30,15,0,194,195,3,24,12,0,195,197,1,0,0,0,196,193,1,0,0,0,197,198,1,0,
		0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,35,1,0,0,0,200,201,3,24,12,0,201,
		202,3,60,30,0,202,203,3,24,12,0,203,37,1,0,0,0,204,205,7,3,0,0,205,39,
		1,0,0,0,206,207,3,28,14,0,207,208,3,60,30,0,208,209,3,28,14,0,209,214,
		1,0,0,0,210,211,3,26,13,0,211,212,3,28,14,0,212,214,1,0,0,0,213,206,1,
		0,0,0,213,210,1,0,0,0,214,41,1,0,0,0,215,216,6,21,-1,0,216,217,3,26,13,
		0,217,218,3,42,21,2,218,221,1,0,0,0,219,221,3,36,18,0,220,215,1,0,0,0,
		220,219,1,0,0,0,221,228,1,0,0,0,222,223,10,3,0,0,223,224,3,38,19,0,224,
		225,3,42,21,4,225,227,1,0,0,0,226,222,1,0,0,0,227,230,1,0,0,0,228,226,
		1,0,0,0,228,229,1,0,0,0,229,43,1,0,0,0,230,228,1,0,0,0,231,232,5,22,0,
		0,232,233,5,6,0,0,233,234,3,40,20,0,234,235,5,7,0,0,235,236,3,6,3,0,236,
		45,1,0,0,0,237,238,5,23,0,0,238,239,5,6,0,0,239,240,3,40,20,0,240,241,
		5,7,0,0,241,242,3,6,3,0,242,47,1,0,0,0,243,247,5,24,0,0,244,248,5,43,0,
		0,245,248,5,42,0,0,246,248,3,20,10,0,247,244,1,0,0,0,247,245,1,0,0,0,247,
		246,1,0,0,0,248,249,1,0,0,0,249,250,5,9,0,0,250,49,1,0,0,0,251,252,3,22,
		11,0,252,253,5,6,0,0,253,254,3,18,9,0,254,255,5,7,0,0,255,51,1,0,0,0,256,
		257,5,25,0,0,257,258,5,6,0,0,258,259,3,22,11,0,259,260,5,7,0,0,260,261,
		5,9,0,0,261,53,1,0,0,0,262,263,5,26,0,0,263,266,5,6,0,0,264,267,3,20,10,
		0,265,267,3,22,11,0,266,264,1,0,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,
		269,5,7,0,0,269,270,5,9,0,0,270,55,1,0,0,0,271,272,5,27,0,0,272,273,5,
		6,0,0,273,281,3,22,11,0,274,275,3,66,33,0,275,276,5,7,0,0,276,277,5,10,
		0,0,277,278,3,58,29,0,278,279,5,11,0,0,279,281,1,0,0,0,280,271,1,0,0,0,
		280,274,1,0,0,0,281,57,1,0,0,0,282,286,5,28,0,0,283,287,5,43,0,0,284,287,
		5,42,0,0,285,287,3,20,10,0,286,283,1,0,0,0,286,284,1,0,0,0,286,285,1,0,
		0,0,287,288,1,0,0,0,288,290,5,29,0,0,289,291,3,8,4,0,290,289,1,0,0,0,291,
		292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,5,
		30,0,0,295,297,1,0,0,0,296,282,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,
		298,299,1,0,0,0,299,308,1,0,0,0,300,301,5,31,0,0,301,303,5,29,0,0,302,
		304,3,8,4,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,
		0,0,0,306,308,1,0,0,0,307,296,1,0,0,0,307,300,1,0,0,0,308,59,1,0,0,0,309,
		310,7,4,0,0,310,61,1,0,0,0,311,312,3,28,14,0,312,313,3,60,30,0,313,314,
		3,28,14,0,314,63,1,0,0,0,315,316,3,0,0,0,316,317,3,22,11,0,317,319,5,38,
		0,0,318,320,5,43,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,
		322,5,39,0,0,322,323,5,9,0,0,323,65,1,0,0,0,324,325,3,22,11,0,325,327,
		5,38,0,0,326,328,5,43,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,
		0,0,329,330,5,39,0,0,330,67,1,0,0,0,331,332,5,40,0,0,332,333,5,6,0,0,333,
		334,3,4,2,0,334,335,5,9,0,0,335,336,3,40,20,0,336,337,5,9,0,0,337,338,
		3,10,5,0,338,339,5,7,0,0,339,340,3,6,3,0,340,69,1,0,0,0,341,342,5,22,0,
		0,342,343,5,6,0,0,343,344,3,40,20,0,344,345,5,7,0,0,345,346,3,6,3,0,346,
		347,5,41,0,0,347,348,3,6,3,0,348,71,1,0,0,0,27,85,93,109,117,119,135,137,
		146,153,161,170,178,190,198,213,220,228,247,266,280,286,292,298,305,307,
		319,327
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
